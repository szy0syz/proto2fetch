// Example: Authentication Management in Generated Client Classes
// This demonstrates the new authentication management methods that are automatically
// generated in client classes created by proto2fetch

import { SimpleAuth, JWTAuth } from 'proto2fetch/runtime';

// This is what a generated client class looks like after proto2fetch v1.2.1+
// It now includes public authentication management methods
export class ExampleAPIClient {
  private client: any; // Simulates the internal APIClient

  constructor(config?: any) {
    console.log('Creating client instance:', config);
    this.client = {
      updateAuthToken: (token: string) => console.log('Updating auth token:', token),
      updateAuthProvider: (provider: any) => console.log('Updating auth provider:', provider.constructor.name),
      clearAuthToken: () => console.log('Clearing auth token')
    };
  }

  // NEW: Authentication management methods (auto-generated by proto2fetch v1.2.1+)
  updateAuthToken(token: string): void {
    this.client.updateAuthToken(token);
  }

  updateAuthProvider(provider: any): void {
    this.client.updateAuthProvider(provider);
  }

  clearAuthToken(): void {
    this.client.clearAuthToken();
  }

  // Simulated API methods
  async getUsers(): Promise<any[]> {
    console.log('Calling getUsers API');
    return [];
  }
}

// USAGE EXAMPLES
console.log('=== Generated Client Authentication Management ===\n');

// 1. Create client instance
const client = new ExampleAPIClient({
  baseUrl: 'https://api.example.com'
});

// 2. User login scenario - dynamically set authentication
console.log('1. User login scenario:');
client.updateAuthToken('user-login-token-123');

// 3. Switch to JWT authentication
console.log('\n2. Switch to JWT authentication:');
client.updateAuthProvider(new JWTAuth('jwt-token-456'));

// 4. Switch to simple authentication
console.log('\n3. Switch to simple authentication:');
client.updateAuthProvider(new SimpleAuth('simple-token-789'));

// 5. Clear authentication (user logout)
console.log('\n4. User logout scenario:');
client.clearAuthToken();

console.log('\n✅ Users can now call these authentication management methods directly on generated client classes!');

// REAL-WORLD USAGE PATTERN
console.log('\n=== Real-world Usage Pattern ===');

// This is how you'd use it in a real application with a generated client
class AuthenticatedApp {
  // Assume this is your generated client from proto2fetch
  private apiClient = new ExampleAPIClient({
    baseUrl: process.env.API_BASE_URL || 'https://api.example.com'
  });

  async userLogin(username: string, password: string) {
    try {
      // Call login API (without auth)
      const loginResponse = await fetch('/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
      });

      const { accessToken, refreshToken } = await loginResponse.json();

      // Set up authentication for all future API calls
      this.apiClient.updateAuthProvider(new JWTAuth(accessToken, {
        onExpired: async () => {
          // Auto-refresh logic
          const refreshResponse = await fetch('/auth/refresh', {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${refreshToken}` }
          });
          const { accessToken: newToken } = await refreshResponse.json();
          return newToken;
        }
      }));

      console.log('✅ User authenticated - all API calls now use JWT');
    } catch (error) {
      console.error('Login failed:', error);
    }
  }

  userLogout() {
    // Clear authentication
    this.apiClient.clearAuthToken();
    console.log('✅ User logged out - authentication cleared');
  }

  // Now all your API methods automatically use the set authentication
  async fetchUserData() {
    return this.apiClient.getUsers(); // Automatically authenticated
  }
}

export { ExampleAPIClient, AuthenticatedApp };